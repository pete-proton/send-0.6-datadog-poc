include "akka-cluster"

akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}

pinned-dispatcher-for-kamon {
  type = "PinnedDispatcher"
  executor = "thread-pool-executor"
  thread-pool-executor.allow-core-pool-timeout = off
}

akka.actor.deployment {
  "/kamon-metrics-subscriptions" {
    dispatcher = pinned-dispatcher-for-kamon
  }
}

spray.can.server {
  request-timeout = 7s
  remote-address-header = on
  server-header: spray-can
  verbose-error-logging = off
  verbose-error-logging = ${?SPRAY_VERBOSE_ERROR_LOGGING}
  verbose-error-messages = off
  verbose-error-messages = ${?SPRAY_VERBOSE_ERROR_MESSAGES}

  parsing {
    max-uri-length = 32k
    illegal-header-warnings = off
  }
}
akka.http.server {
  request-timeout = 7s
  remote-address-header = on

  verbose-error-messages = off
  verbose-error-messages = ${?SPRAY_VERBOSE_ERROR_MESSAGES}

  parsing {
    max-uri-length = 32k
    illegal-header-warnings = off
  }
}

spray.can.client {
  idle-timeout = infinite
  user-agent-header: ""
}

spray.can.host-connector {
  idle-timeout = infinite
  max-connections = 64
}

akka {
  http {
    client {
       user-agent-header = ""
       idle-timeout = infinite
    }

    host-connection-pool {
       max-connections = 128
       max-open-requests = 8192
    }
  }
}

kamon {
  akka {
    ask-pattern-timeout-warning = off
    ask-pattern-timeout-warning = ${?ASK_PATTERN_TIMEOUT_WARNING}
  }
  metric {
    # ignore warning at `re-start` task in sbt
    disable-aspectj-weaver-missing-error = true

    filters {
      akka-actor {
        includes = [ "**" ]
        excludes = [
          "*/system/**",
          "*/user/IO-**",
          "*/user/StreamSupervisor-*",
          "*/user/StreamSupervisor-*/**",
          "kamon/**",
          "sharaku-web/user/main_service*/auctioneer/*/flow*",

          # Preventing too many tags of akka-actor custom metrics on datadog
          #   - https://caadtech.slack.com/archives/G04BSRVK9/p1560239899097000
          "sharaku-web/user/main_service*/auctioneer/*_bidder",
          "sharaku-web/user/main_service*/auctioneer/*_bidder/**",
          "sharaku-web/user/pool-master/*"
        ]
      }
      trace {
        includes = [ "**" ]
        excludes = []
      }
      akka-dispatcher {
        includes = [ "**" ]
        excludes = []
      }
    }
    tick-interval: 1 second
  }
  datadog {
    flush-interval: 1 second
  }
  statsd {
    flush-interval: 1 second
  }
}

jp.co.cyberagent.sharaku.io.log.kinesis {
  region = "ap-northeast-1"
  demand-aduse-json-stream = "dev-demand-aduse-json"
  adcall-json-stream = "dev-adcall-json"
  demand-adcall-json-stream = "dev-demand-adcall-json"
  demand-adresponse-json-stream = "dev-demand-adresponse-json"
  impression-json-stream = "dev-impression-json"
  vimp-json-stream = "dev-vimp-json"
  click-json-stream = "dev-click-json"
  vt-event-json-stream = "dev-vt-event-json"
  vt-update-json-stream = "dev-vt-update-json"
}

jp.co.cyberagent.sharaku.web {
    port = 8080
}

jp.co.cyberagent.sharaku.web.tracking-urls {
  port = 80
}

jp.co.cyberagent.sharaku.web.api.reports {
  request-timezone = "UTC"
  response-timezone = "Asia/Tokyo"
}
jp.co.cyberagent.sharaku.web.api.performances {
  request-timezone = "UTC"
  response-timezone = "Asia/Tokyo"
  response-date-format = "yyyy/MM/dd",
  response-week-format = "yyyy/MM/dd ~",
  response-month-format = "yyyy/MM",
  csv-filename-format = "yyyyMMddHHmmss",
  csv-encoding="Windows-31J"
}

jp.co.cyberagent.sharaku.web.txid-mapping {
  credential = "DEFAULT_CREDENTIAL"
  credential = ${?TXID_MAPPING_CREDENTIAL}
}

jp.co.cyberagent.sharaku.web.environment.entire-timeout = 5 s

jp.co.cyberagent.sharaku.web.environment.health-check {
  targets = "all"
  targets = ${?HEALTH_CHECK_TARGETS}
}

jp.co.cyberagent.sharaku.web.environment.user-agent-cache-size = ${?USER_AGENT_CACHE_SIZE}

jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs {
  generic {
    profit-x {
      codec = "profit-x"
      credential {
        cipher-transformation = "DESede/CFB8/NoPadding"
      }
    }

    google {
      codec = "google"
      price-unit = "milli" # https://developers.google.com/authorized-buyers/rtb/response-guide
    }
  }

  puread = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "00000000000000000000000000000000"
      iv  = "AAAAAAAAAAA"
    }
  }
  dynalyst = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "Vj7rymhO-hNxOegNC2Dk6dqxMXMalrvh"
      iv  = "AAAAAAAAAAA"
    }
  }
  fout = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "XIKQsaHL06aG6P37cYozZlgPTkaM086N"
      iv  = "ZE5W9EnBur0"
    }
  }
  genius-rtb = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "R7jIzn8VN6VP1pZ9JINyUzbp4yIn12Cm"
      iv  = "JlWx3Thhv5I"
    }
  }
  scaleout = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "eJ4n9u4bXIHnxnHJHenSGlkJ2vrVOVa8"
      iv  = "Lh47cB2E0rc"
    }
  }
  bid-switch = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "IqJQ6yznW_c_LhpoQRq_3l6233jdiLQE"
      iv  = "0FP9KjXcoew"
    }
  }
  bypass-rtb = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "mKZ_nyqIpg85UAF51tvW81D2G3XXW6dY"
      iv = "hVchvyOc7N8"
    }
  }
  sirok = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "Ngn5y5Clwfz9Ivb9sAOwszfqHKHCCJLG"
      iv  = "tjIUNcu17JI"
    }
  }
  unicorn = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "pXZ9fGj4vwn98DIQO3bCMRpm5JFjgH7S"
      iv  = "1CUSCbh_xaA"
    }
  }
  logicad = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "VB9-Shnyb2FwOYBwm9R1YqVVn5_fJSXV"
      iv  = "OjWJ3iYapF8"
    }
  }
  ameba-dsp = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "-s05wLDbJadjHjlJG4GpUelu8BfEBcJh"
      iv  = "s-PQDM8GlIU"
    }
  }
  airtrack = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "Tz0tzZKsqRNAtrakB-QGhKDParofapg-"
      iv  = "XH1dZXy5WuM"
    }
  }
  criteo = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.google} {
    price-unit = "micro"
    credential {
      encryption-key = "UhiUAqdmbchaVy6N63naWG1GgtZyYeaOW4h5egyCBUA"
      integrity-key  = "rOR7Ydu5BoSaWB4QRcHmFXsX9XsF8ltHQJutqvUZEvM"
    }
  }
  rubicon = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.google} {
    price-unit = "micro"
    credential {
      encryption-key = "0000000000000000000000000000000000000000000"
      integrity-key  = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    }
  }
  rtbhouse = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "uMPpKkDYzwzhf60iIWtWEIE9dqr686yZ"
      iv  = "pO02GKub_6I"
    }
  }
  vrize = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "hlKymUp7xsOf1E2yOYKDnkWN82gdSAxp"
      iv  = "ur3J1SdJENU"
    }
  }
  xandr = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.google} {
    credential {
      encryption-key = "Jcm1PZ67lfJuP_tztN_37GqUMiuTxsRSwMIc_5htXgw"
      integrity-key  = "KQpxdtQH0NfZ-kv-LagFsDQm2p-qNiJ7tTr8yRtZfeo"
    }
  }
  dataone = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "WiWicHrdmYi0shnPRihUJpdaB2aKPCWX"
      iv  = "Prv1V_IkZ8w"
    }
  }
  appier = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "whBJFW-E60Dc09KCMdMvOyQVhzGbavVI"
      iv  = "jLS8Ep825oY"
    }
  }
  prismpartner = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "pw_Y65TlhZ_Xn_ntiHmLjGGvykBF2iOT"
      iv  = "Ejyfb5pW76c"
    }
  }
  ana-x = ${jp.co.cyberagent.sharaku.web.crypto.charged-price-codecs.generic.profit-x} {
    credential {
      key = "dItA_b73K45fO5HhNDbEtt7HVSTQ2h6M"
      iv  = "gUb_yGXx14Y"
    }
  }
}

jp.co.cyberagent.sharaku.web.router {
  collect.kamon-cache-size      = 10000
  impression.kamon-cache-size   = 10000
  view_through.kamon-cache-size = 10000

  auctioneer.tmax {
    min =   50
    max = 2000
  }
}

jp.co.cyberagent.sharaku.web.util {
  audience-metrics {
    kamon-cache-size = 10000
  }

  macro-expansion.click-urls {
    enabled-bidder-names = ["logicad", "prismpartner", "ana-x"]
  }
}

jp.co.cyberagent.io.datadog {
  host = "app.datadoghq.com"
  port = 443
  is-ssl = true
  api-key =  ""
  api-key =  ${?DATADOG_API_KEY}
  application-key = ""
  application-key = ${?DATADOG_APP_KEY}
  paths {
    query = "/api/v1/query"
  }
}

kamon {
  internal-config {
    akka.extensions = []
  }
}
